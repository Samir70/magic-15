{"version":3,"sources":["Screens/Settings.js","Screens/TicTacToe.js","Screens/Magic15.js","CompMoves/CompMoves.js","App.js","serviceWorker.js","index.js"],"names":["Settings","props","react_default","a","createElement","className","currentSetting","onClick","switchMode","TicTacToe","i","crosses","gamePos","p1Cards","noughts","p2Cards","empties","cardsLeft","magicSquare","magicKeys","join","indexOfLastMove","indexOf","lastMove","length","posClasses","ttBoard","map","cell","index","key","click","restart","splice","Magic15","player1Cards","player2Cards","notChosen","winCards","whoWon","notChosenList","card","player1CardsList","includes","player2CardsList","borderClasses","sideMove","statusDisplay","restartButton","id","noWinner","sumThreeAndList","cards","indices","cardSubset","filter","c","reduce","b","concat","Object","toConsumableArray","threeOfFour","threeOfFive","CheckForWin","player","sumList","push","console","log","s","slice","App","state","screenToShow","playMode","gamePosition","lastMoveMade","sideToMove","computerToPlay","winner","switchModeHandler","_this","setState","restartHandler","cardChosenHandler","winningCards","currentSideToMove","currentCardsLeft","currentP1Cards","currentP2Cards","Number","x","_this2","this","menuClasses","choiceOfCards","navDisplay","Math","floor","random","Screens_Magic15","Screens_TicTacToe","Screens_Settings","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0dcf7637.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Screens.css'\r\n\r\nfunction Settings (props) {\r\n    return (\r\n        <div className=\"mainScreen\">\r\n            <div className=\"oneOfTwoCol blueBorder\">\r\n                <h1>How to play magic 15</h1>\r\n                <p>Players take turns to pick cards.</p>\r\n                <p>If any three of a player's cards add up to 15, that player wins. For example:</p>\r\n                <p>Suppose you have chosen the cards 3, 5 and 6. These cards only add up to 14.\r\n                    So you haven't won yet! But if you can choose a 4 on your next turn you will have the cards:\r\n                    <br/> 3, 5, 6 and 4. Of these cards, three of them (5, 6 and 4) add up to 15. Winner!\r\n                </p>\r\n                <p>(Notice that, with 3, 5 and 6 in you hand, you could also have chosen a 7. \r\n                    <br />Because 3, 5 and 7 also add up to 15).</p>\r\n                <h2>Why is this game being presented with Noughts and Crosses?</h2>\r\n                <p>Well... There is a connection. \r\n                    Move from screen to screen as you play and see if you can figure it out</p>\r\n            </div>\r\n            <div className=\"oneOfTwoCol blueBorder\">\r\n                <p>The current playing mode is set to:</p>\r\n                <h2 className=\"modeDisplay\">{props.currentSetting}</h2>\r\n                <div className=\"switchModeBtn\" onClick={props.switchMode}>Switch to other playing mode</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\nimport './Screens.css'\r\n\r\nfunction TicTacToe (props) {\r\n    let crosses = props.gamePos.p1Cards;\r\n    let noughts = props.gamePos.p2Cards;\r\n    let empties = props.gamePos.cardsLeft;\r\n    // use the magic square to figure out a string of character to represent the board in noughts and crosses\r\n    // basically: replace the numbers for the magic square with noughts or crosses\r\n    // magic square being used:\r\n    // 2 9 4\r\n    // 7 5 3\r\n    // 6 1 8\r\n    let magicSquare = [2, 9, 4, 7, 5, 3, 6, 1, 8];\r\n    const magicKeys = magicSquare.join(\"\");\r\n    var indexOfLastMove = magicSquare.indexOf(props.lastMove);\r\n    // counter for loops:\r\n    var i;\r\n\r\n    for (i=0;i<empties.length;i++) {\r\n        magicSquare[magicSquare.indexOf(empties[i])] = '?'}\r\n    for (i=0;i<crosses.length;i++) {\r\n        magicSquare[magicSquare.indexOf(crosses[i])] = 'X'}\r\n    for (i=0;i<noughts.length;i++) {\r\n        magicSquare[magicSquare.indexOf(noughts[i])] = 'O'}\r\n\r\n    // The next is an array which will provide the correct classes for the cells of the board\r\n    var posClasses = [\r\n        \"topLeft\", \"topMiddle\", \"topRight\", \r\n        \"midLeft\", \"\", \"midRight\",\r\n        \"botLeft\", \"botMiddle\", \"botRight\" \r\n    ];\r\n\r\n    posClasses[indexOfLastMove] += \" moveAppear\";\r\n    \r\n    var ttBoard = magicSquare.map((cell, index) => {\r\n        return <td \r\n          className={posClasses[index]} \r\n          key={magicKeys[index]}\r\n          onClick={() => props.click(magicKeys[index])}>{cell}</td>\r\n    })\r\n    \r\n    return (\r\n        <div>\r\n            <button className=\"restartBtn\" onClick={props.restart}>Restart</button>\r\n            <table className=\"mainScreen\">\r\n                <tbody className=\"ticTacBoard\">\r\n                    <tr>{ttBoard.splice(0,3)}</tr>\r\n                    <tr>{ttBoard.splice(0,3)}</tr>\r\n                    <tr>{ttBoard.splice(0,3)}</tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TicTacToe;","import React from 'react';\r\n\r\nfunction Magic15 (props) {\r\n  let player1Cards = props.gamePos.p1Cards;\r\n  let player2Cards = props.gamePos.p2Cards;\r\n  let notChosen = props.gamePos.cardsLeft;\r\n  var winCards = props.whoWon;\r\n\r\n  var notChosenList = notChosen.map((card) => {\r\n    return <button \r\n      className=\"card\"\r\n      onClick={() => props.click(card)}\r\n      key={card} >{card}</button>\r\n  })\r\n  var player1CardsList = player1Cards.map((card) => {\r\n    if (winCards.includes(card)) {\r\n      return <button className=\"card card-player1 cardPulse\" key={card}>{card}</button>\r\n    } else { return <button className=\"card card-player1\" key={card}>{card}</button> }\r\n  })\r\n  var player2CardsList = player2Cards.map((card) => {\r\n    if (winCards.includes(card)) {\r\n      return <button className=\"card card-player2 cardPulse\" key={card}>{card}</button>\r\n    } else { return <button className=\"card card-player2\" key={card}>{card}</button> }\r\n  })\r\n\r\n  let borderClasses = [\"p1Area\", \"p2Area\"];\r\n  if (props.sideMove === \"cross\") {\r\n    borderClasses[0] += \" redBorder\"; borderClasses[1] += \" blueBorder\"\r\n  } else {\r\n    borderClasses[0] += \" blueBorder\"; borderClasses[1] += \" redBorder\"\r\n  }\r\n\r\n  let restartButton = <button className=\"restartBtn\" onClick={props.restart}>Restart</button>\r\n  let statusDisplay;\r\n\r\n  switch (winCards[0]) {\r\n    case \"cross\" :  {statusDisplay = <p>Player 1 has won! <br /> Well Done! {restartButton} </p>; break}\r\n    case \"nought\" : {statusDisplay = <p>Player 2 has won! <br /> Well Done! {restartButton} </p>; break }\r\n    case \"drawn\" : {statusDisplay = <p>No-one has won. <br /> Good game! {restartButton} </p>; break }\r\n    default : {statusDisplay = <p>Pick a card or {restartButton}<br />   {notChosenList}</p>}\r\n  }\r\n\r\n    return (\r\n      <div id=\"magic15Container\">\r\n          <div className=\"freeCardArea blueBorder\">\r\n            {statusDisplay}\r\n          </div>\r\n        <div className=\"playerArea\">\r\n          <div className={borderClasses[0]} >\r\n            <p>Player 1's cards</p>\r\n            {player1CardsList}\r\n          </div>\r\n          <div className={borderClasses[1]} >\r\n            <p>Player 2's cards</p>\r\n            {player2CardsList}\r\n          </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Magic15;","function RandomMove (choiceOfCards) {\r\n    return choiceOfCards[Math.floor(Math.random()*choiceOfCards.length)]\r\n}\r\n\r\nconst noWinner = [\"no-one\", 0, 0, 0];\r\n\r\nfunction sumThreeAndList (cards, indices) {\r\n    var cardSubset = cards.filter((c, i) => indices.includes(i));\r\n    return [cardSubset.reduce((a, b) => a+b), ...cardSubset];\r\n}\r\n\r\nconst threeOfFour = [ [0, 1, 2], [0, 1, 3], [0, 2, 3], [1, 2, 3] ];\r\nconst threeOfFive = [ \r\n    [0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 3], [0, 2, 4],\r\n    [0, 3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4] \r\n]\r\n\r\n\r\nfunction CheckForWin (player, cards) {\r\n    var sumList = [];\r\n    switch (cards.length) {\r\n        case 3 : { sumList.push(sumThreeAndList(cards, [0,1,2])); break }\r\n        case 4 : { sumList = threeOfFour.map(a => sumThreeAndList(cards, a)); break}        \r\n        case 5 : { sumList = threeOfFive.map(a => sumThreeAndList(cards, a)); break}        \r\n        default : {return noWinner}\r\n    }\r\n    console.log(\"this is sumlist: \", sumList)\r\n    sumList = sumList.filter(s => s[0] === 15);\r\n    console.log(\"this is sumlist after filtering: \", sumList)\r\n    if (sumList.length > 0) { return [player, ...sumList[0].slice(1)]}\r\n       if (cards.length === 5) {return [\"drawn\", 0, 0, 0]}\r\n          else {return noWinner};\r\n}\r\n\r\nexport {CheckForWin, RandomMove, noWinner};","import React, { Component } from 'react';\nimport Settings from './Screens/Settings';\nimport TicTacToe from './Screens/TicTacToe';\nimport Magic15 from './Screens/Magic15';\nimport {RandomMove, CheckForWin, noWinner} from './CompMoves/CompMoves';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    screenToShow: \"settings\",\n    playMode: \"Human VS Computer\",\n    gamePosition: {cardsLeft:[1, 2, 3, 4, 5, 6, 7, 8, 9], p1Cards:[], p2Cards:[]},\n    lastMoveMade: -1,\n    sideToMove: \"cross\", // The cross player normally goes first!\n    computerToPlay: \"nought\", \n    winner: [\"no-one\", 0, 0, 0]\n  }\n\n  switchModeHandler = () => {\n    this.state.playMode === \"Human VS Computer\" ? \n        this.setState({playMode: \"Human VS Human\"}) : this.setState({playMode: \"Human VS Computer\"})           \n  }\n\n  restartHandler = () => {\n    this.setState({\n      gamePosition: {cardsLeft:[1, 2, 3, 4, 5, 6, 7, 8, 9], p1Cards:[], p2Cards:[]},\n      lastMoveMade: -1,\n      sideToMove: \"cross\", // The cross player normally goes first!\n      computerToPlay: \"nought\", \n      winner: [\"no-one\", 0, 0, 0]})\n  }\n\n  cardChosenHandler = (card) => {\n    console.log(\"something was clicked and I got sent:\", card);\n    var currentSideToMove = this.state.sideToMove;\n    var currentCardsLeft = [...this.state.gamePosition.cardsLeft];\n    var currentP1Cards = [...this.state.gamePosition.p1Cards];\n    var currentP2Cards = [...this.state.gamePosition.p2Cards];\n    var winningCards;\n    if (currentSideToMove !== \"pause\" && currentCardsLeft.includes(Number(card))) {\n      currentCardsLeft = currentCardsLeft.filter(x => x !== Number(card));\n      if (currentSideToMove === \"cross\") {\n        currentP1Cards.push(Number(card));\n        currentSideToMove = \"nought\";\n        winningCards = CheckForWin(\"cross\", currentP1Cards)\n      } else {\n        currentP2Cards.push(Number(card)); \n        currentSideToMove = \"cross\";\n        winningCards = CheckForWin(\"nought\", currentP2Cards)\n      } \n\n      if (winningCards !== noWinner) {\n        currentSideToMove = \"pause\"\n      }\n\n      this.setState({sideToMove: currentSideToMove, \n        gamePosition: {cardsLeft: currentCardsLeft, p1Cards:currentP1Cards, p2Cards:currentP2Cards},\n        lastMoveMade: Number(card), winner:winningCards })     \n    }    \n  }\n\n  render() {\n    let menuClasses = [\"nav-item\", \"nav-item\", \"nav-item\"]\n      switch (this.state.screenToShow) {\n        case \"magic15\"  : {menuClasses[0] = \"nav-item fancyText\"; break}\n        case \"n&c\"      : {menuClasses[1] = \"nav-item fancyText\"; break}\n        case \"settings\" : {menuClasses[2] = \"nav-item fancyText\"; break}\n        default : {}\n    }\n\n    let navDisplay = (\n      <div id=\"nav-bar\">\n        <div className={menuClasses[0]} \n          onClick={() => this.setState({screenToShow: \"magic15\"})}>Magic 15</div>\n        <div className={menuClasses[1]} \n          onClick={() => this.setState({screenToShow: \"n&c\"})}>Noughts and crosses</div>\n        <div className={menuClasses[2]} \n          onClick={() => this.setState({screenToShow: \"settings\"})}>Settings</div>\n      </div>\n    );\n\n    if (this.state.playMode === \"Human VS Computer\" \n          && this.state.computerToPlay === this.state.sideToMove) {\n             this.cardChosenHandler(RandomMove(this.state.gamePosition.cardsLeft))\n    }\n\n    console.log(\"And the winner is:\", this.state.winner)\n\n    return (\n      <div className=\"App\">\n        {navDisplay}        \n        {this.state.screenToShow === \"magic15\" && \n          <Magic15 \n            gamePos={this.state.gamePosition}\n            sideMove={this.state.sideToMove}\n            whoWon={this.state.winner}\n            restart={this.restartHandler}\n            click={this.cardChosenHandler} /> }\n        {this.state.screenToShow === \"n&c\" && \n          <TicTacToe \n            gamePos={this.state.gamePosition}\n            lastMove={this.state.lastMoveMade}\n            whoWon={this.state.winner}\n            restart={this.restartHandler}\n            click={this.cardChosenHandler} />}\n        {this.state.screenToShow === \"settings\" && \n          <Settings \n            currentSetting={this.state.playMode} \n            switchMode={this.switchModeHandler} />}                  \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}